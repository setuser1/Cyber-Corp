# ðŸ§  Expanded Linux x86_64 System Call Table

**Quick Reference for Linux Syscalls on x86_64**

> **Architecture Note:**  
> In x86_64 Linux, the syscall number is placed in **RAX**, and arguments are passed in registers in the following order: **RDI, RSI, RDX, R10, R8, R9**.

| System Call | Number | Registers                  | Argument Descriptions                                                                                                                                         | Simpler Explanation                                       |
|-------------|--------|----------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|
| `read`      | 0      | RDI, RSI, RDX              | **RDI:** file descriptor to read from; **RSI:** address of buffer to store read data; **RDX:** number of bytes to read.                                        | Read N bytes from a file into a buffer.                   |
| `write`     | 1      | RDI, RSI, RDX              | **RDI:** file descriptor to write to; **RSI:** address of buffer containing data to write; **RDX:** number of bytes to write.                                  | Write N bytes from a buffer to a file.                    |
| `open`      | 2      | RDI, RSI, RDX              | **RDI:** address of the pathname string; **RSI:** flags controlling open mode; **RDX:** file mode (permissions) if creating a new file (O_CREAT).              | Open a file with specified name, flags, and mode.         |
| `close`     | 3      | RDI                        | **RDI:** file descriptor to close.                                                                                                                              | Close an open file descriptor.                            |
| `stat`      | 4      | RDI, RSI                   | **RDI:** address of the pathname string; **RSI:** address of stat structure to store file info.                                                                 | Get file status information (size, permissions, etc.).    |
| `mmap`      | 9      | RDI, RSI, RDX, R10, R8, R9 | **RDI:** desired start address (0 = kernel chooses); **RSI:** mapping length; **RDX:** protection flags; **R10:** mapping flags; **R8:** file descriptor or -1; **R9:** file offset. | Map a file or anonymous memory into the process address space. |
| `fork`      | 57     | â€”                          | No arguments. Creates a new process by duplicating the caller.                                                                                                  | Duplicate the current process.                            |
| `execve`    | 59     | RDI, RSI, RDX              | **RDI:** address of the program pathname; **RSI:** address of argument array (argv); **RDX:** address of environment array (envp).                               | Replace current process with a new program.               |
| `kill`      | 62     | RDI, RSI                   | **RDI:** target processâ€™s PID; **RSI:** signal number (e.g., 9 for SIGKILL).                                                                                   | Send a signal to a process.                               |
| `getpid`    | 39     | â€”                          | No arguments. Returns the calling processâ€™s PID.                                                                                                               | Retrieve the current process ID.                          |
| `pipe`      | 22     | RDI                        | **RDI:** address of an array to receive two file descriptors (read/write ends).                                                                                | Create a unidirectional data channel.                     |
| `dup`       | 32     | RDI                        | **RDI:** old file descriptor to duplicate.                                                                                                                      | Duplicate an existing file descriptor.                    |
| `exit`      | 60     | RDI                        | **RDI:** exit status code (0 = success, non-zero = error).                                                                                                      | Terminate process with a status code.                     |
| `wait`      | 247    | RDI                        | **RDI:** address to store child processâ€™s exit status.                                                                                                         | Wait for a child process to finish and get its status.    |
