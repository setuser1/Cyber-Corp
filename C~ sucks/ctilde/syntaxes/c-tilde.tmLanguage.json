{
  "scopeName": "source.ctilde",
  "name": "C~",
  "patterns": [
    { "include": "#comments" },
    { "include": "#preprocessor" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#numbers" },
    { "include": "#strings" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#function-def" },
    { "include": "#function-call" },
    { "include": "#declaration" },
    { "include": "#assignment" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ctilde",
          "begin": "//",
          "end": "$"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.include.ctilde",
          "match": "#\\s*include\\s*(<[^>]+>|\"[^\"]+\")",
          "captures": {
            "0": { "name": "keyword.control.import.include.ctilde" },
            "1": { "name": "string.quoted.other.lt-gt.include.ctilde" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ctilde",
          "match": "\\b(if|xif|else|while|return|expr|break|continue)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.ctilde",
          "match": "\\b(int|char|float|double|void)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.ctilde",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ctilde",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ctilde",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.ctilde",
          "match": "(\\+|\\-|\\*|\\/|==|!=|<=|>=|<|>|=|:|;|,)"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.section.block.ctilde",
          "match": "[\\{\\}\\(\\)\\[\\]]"
        }
      ]
    },
    "function-def": {
      "patterns": [
        {
          "name": "meta.function.ctilde",
          "match": "^(?:\\s)*(?:int|char|float|double|void|expr)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function" }
          }
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "name": "meta.function-call.ctilde",
          "match": "(?<!\\b(?:int|char|float|double|void|expr)\\s)([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "support.function" }
          }
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "name": "meta.declaration.ctilde",
          "match": "\\b(int|char|float|double)\\s+[a-zA-Z_][a-zA-Z0-9_]*(\\s*\\[\\s*\\d*\\s*\\])?\\s*:"
        }
      ]
    },
    "assignment": {
      "patterns": [
        {
          "name": "meta.assignment.ctilde",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*(\\[\\d+\\])?)\\s*=\\s*[^:]+:"
        }
      ]
    }
  }
}